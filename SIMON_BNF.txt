
<class declarations> ::= <class declaration> | <class declaration>  <class declarations>
<class declaration> ::= class <identifier> <class body>
<class body> ::= { <class body declarations>? }
<class body declarations> ::= <class body declaration> | <class body declarations> <class body declaration>
<class body declaration> ::= <class member declaration> | <constructor declaration>

<class member declaration> ::= <field declaration> | <method declaration>
<constructor declaration> ::= <constructor declarator> <constructor body>
<constructor declarator> ::= <identifier> ( <formal parameter list>? )

<formal parameter list> ::= <formal parameter> | <formal parameter list> , <formal parameter>
<formal parameter> ::= <type> <variable declarator id>

<constructor body> ::= { <block statements> } ;
<field declaration> ::= <variable declarators> | <variable declarator> ;

<variable declarators> ::= <type> <variable declarator> | <variable declarators> , <variable declarator>
<variable declarator> ::= <variable declarator id> | <variable declarator id> = <variable initializer>
<variable declarator id> ::= <identifier> | <identifier> [ ]
<variable initializer> ::= <expression>

<method declaration> ::= <method header> <method body>
<method header> ::= <method declarator>
<method declarator> ::= <identifier> ( <formal parameter list>? )
<method body> ::= <block> | ;

<block> ::= { <block statements>? }
<block statements> ::= <block statement> | <block statements> <block statement>
<block statement> ::= <variable declarators> | <statement> | <method invocation> ;
<statement> ::= <statement without trailing substatement> | <if then statement> | <if then else statement> | <while statement>
<statement without trailing substatement> ::= <block> | <empty statement> | <assignment> | <return statement> ;
<empty statement> ::= ;
<if then statement>::= if ( <conditional expression> ) <statement>
<if then else statement>::= if ( <conditional expression> ) <statement> else <statement> 
<while statement> ::= while ( <conditional expression> ) <statement>
<return statement> ::= return <expression>? ;

<conditional expression> ::= <conditional not expression>
<conditional not expession> ::= !<conditional or expression> | <conditional or expression>
<conditional or expression> ::= <conditional and expression> | <conditional or expression> || <conditional and expression>
<conditional and expression> ::= <equality expression> | <conditional and expression> && <equality expression>

<equality expression> ::= <relational expression> | <equality expression> == <relational expression> | <equality expression> != <relational expression>
<relational expression> ::= <additive expression> | <relational expression> < <additive expression> | <relational expression> > <additive expression> | <relational expression> <= <additive expression> | <relational expression> >= <additive expression> 

<expression> ::= <assignment expression>
<assignment expression> ::= <additive expression> | <assignment>
<assignment> ::= <left hand side> = <assignment expression> ;
<left hand side> ::= <identifier> | <array access>

<additive expression> ::= <multiplicative expression> | <additive expression> + <multiplicative expression> | <additive expression> - <multiplicative expression>
<multiplicative expression> ::= <unary expression> | <multiplicative expression> * <unary expression> | <multiplicative expression> / <unary expression> | <multiplicative expression> % <unary expression>
<unary expression> ::= + <unary expression> | - <unary expression> | <unary expression not plus minus>
<unary expression not plus minus> ::= <primary> | <identifier>

<primary> ::= <primary no new array> | <array creation expression>
<primary no new array> ::= <literal> | ( <expression> ) | <class instance creation expression> | <method invocation> | <array access>
<class instance creation expression> ::= new <identifier> ( <argument list>? )
<argument list> ::= <expression> | <argument list> , <expression>
<array creation expression> ::= new <primitive type> <dim exprs> | new <identifier> <dim exprs>
<dim exprs> ::= <dim expr> | <dim exprs> <dim expr>
<dim expr> ::= [ <expression> ]
<array access> ::= <identifier> [ <expression> ] | <array_access> [ <expression> ]

<method invocation> ::= <method name> ( <argument list>? ) 
<method name> ::= <identifier>

<literal> ::= <integer literal> | <character literal>
<integer literal> ::= <decimal numeral>

<character literal> ::= ' <single character> '
<single character> ::= <letter>

<decimal numeral> ::= <zero digit> | <non zero digit> <digits>?
<digits> ::= <digit> | <digits> <digit>
<digit> ::= <zero digit> | <non zero digit>
<non zero digit> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
<zero digit> ::= 0

<type> ::= <primitive type> | <reference type>
<primitive type> ::= integer | char

<reference type> ::= <identifier>
<array type> ::= <type> [ ] 

<identifier> ::= <letter> | <identifier> <word>
<word> ::= <letter> | <digit>

digit : '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' ;
letter : 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'y' | 'z' | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' ;


<digit> ::= 0 |1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

 <letter> ::= a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | _ | \n | \" | \' | \0 | \t | \\
